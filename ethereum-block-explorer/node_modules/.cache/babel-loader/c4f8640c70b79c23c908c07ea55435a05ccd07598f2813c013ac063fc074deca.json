{"ast":null,"code":"var _s = $RefreshSig$();\nimport { Alchemy, Network } from 'alchemy-sdk';\nimport { useEffect, useState } from 'react';\nimport { ethers, utils, BigNumber } from 'ethers';\nimport './App.css';\n\n// Refer to the README doc for more information about using API\n// keys in client-side code. You should never do this in production\n// level code.\nconst settings = {\n  apiKey: process.env.REACT_APP_ALCHEMY_API_KEY,\n  network: Network.ETH_MAINNET\n};\n\n// // In this week's lessons we used ethers.js. Here we are using the\n// // Alchemy SDK is an umbrella library with several different packages.\n// //\n// // You can read more about the packages here:\n// //   https://docs.alchemy.com/reference/alchemy-sdk-api-surface-overview#api-surface\nconst alchemy = new Alchemy(settings);\nfunction App() {\n  _s();\n  // const [blockNumber, setBlockNumber] = useState();\n  const [address, setAddress] = useState();\n  const [blocksToSearch, setBlocksToSearch] = useState();\n  useEffect(() => {\n    // async function getBlockNumber() {\n    //   setBlockNumber(await alchemy.core.getBlockNumber());\n    // }\n    // getBlockNumber();\n    // return <div className=\"App\">Block Number: {blockNumber}</div>;\n\n    async function getTxnHistory() {\n      const txnHistory = [];\n      const blockNumber = await alchemy.core.getBlockNumber();\n      for (let i = blockNumber - blocksToSearch; i <= blockNumber; i++) {\n        console.log(\"block number:\" + i);\n        const block = await alchemy.core.getBlockWithTransactions(i);\n        const blockTransactions = block.transactions;\n        const dateObj = new Date(block.timestamp * 1000);\n        const date = dateObj.toLocaleString();\n        let txnRecord = {};\n        for (let j = 0; j < blockTransactions.length; j++) {\n          if (blockTransactions[j].from == address || blockTransactions[j].to == address) {\n            const gasFee = blockTransactions[j].gasPrice * blockTransactions[j].gasLimit;\n            let txnURL = \"https://etherscan.io/tx/\" + blockTransactions[j].hash;\n            txnRecord['Date'] = date;\n            txnRecord['Block Number'] = i.toString();\n            if (blockTransactions[j].from == address) {\n              txnRecord['Txn Type'] = 'Sent';\n              txnRecord['Counterparty'] = blockTransactions[j].to;\n            }\n            ;\n            if (blockTransactions[j].to == address) {\n              txnRecord['Txn Type'] = 'Received';\n              txnRecord['Counterparty'] = blockTransactions[j].from;\n            }\n            ;\n            txnRecord['Amount'] = ethers.utils.formatEther(ethers.BigNumber.from(parseInt(blockTransactions[j].value._hex, 16).toString()));\n            txnRecord['Gas Fee'] = ethers.utils.formatEther(ethers.BigNumber.from(parseInt(gasFee.toString(16))));\n            txnRecord['Etherscan Txn Record'] = txnURL;\n            txnHistory.push(txnRecord);\n            console.log(txnRecord);\n          }\n          ;\n        }\n        ;\n      }\n      ;\n      return txnHistory;\n    }\n    ;\n\n    // const address = document.getElementById(\"public-address\").value;\n    // const blocksToSearch = document.getElementById(\"blocks-to-search\").value;\n    // const response = await axios.get(`${server}/get-address-txns/${address}/${blocksToSearch}`);\n    const txnHistory = getTxnHistory();\n    let html = \"<table class='table'>\" + \"<tr>\" + \"<th>Date</th>\" + \"<th>Block Number</th>\" + \"<th>Txn Type</th>\" + \"<th>Counterparty</th>\" + \"<th>Amount (ETH)</th>\" + \"<th>Gas Fee (ETH)</th>\" + \"<th>Etherscan Txn Record</th>\" + \"</tr>\";\n    for (let i = 0; i < txnHistory.length; i++) {\n      html += \"<tr>\" + \"<td>\" + txnHistory[i]['Date'] + \"</td>\" + \"<td>\" + txnHistory[i]['Block Number'] + \"</td>\" + \"<td>\" + txnHistory[i]['Txn Type'] + \"</td>\" + \"<td>\" + txnHistory[i]['Counterparty'] + \"</td>\" + \"<td>\" + txnHistory[i]['Amount'] + \"</td>\" + \"<td>\" + txnHistory[i]['Gas Fee'] + \"</td>\" + \"<td>\" + \"<a href='\" + txnHistory[i]['Etherscan Txn Record'] + \"'>\" + txnHistory[i]['Etherscan Txn Record'] + \"</a>\" + \"</td>\" + \"</tr>\";\n    }\n    ;\n    html += \"</table>\";\n    return html;\n  });\n}\n_s(App, \"w4+ddHtMa9+ME52s8Vf5xT65ZEo=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Alchemy","Network","useEffect","useState","ethers","utils","BigNumber","settings","apiKey","process","env","REACT_APP_ALCHEMY_API_KEY","network","ETH_MAINNET","alchemy","App","address","setAddress","blocksToSearch","setBlocksToSearch","getTxnHistory","txnHistory","blockNumber","core","getBlockNumber","i","console","log","block","getBlockWithTransactions","blockTransactions","transactions","dateObj","Date","timestamp","date","toLocaleString","txnRecord","j","length","from","to","gasFee","gasPrice","gasLimit","txnURL","hash","toString","formatEther","parseInt","value","_hex","push","html"],"sources":["/Users/benjaminshmulevsky/repos/alchemyu/ethereum-block-explorer/src/App.js"],"sourcesContent":["import { Alchemy, Network } from 'alchemy-sdk';\nimport { useEffect, useState } from 'react';\nimport { ethers, utils, BigNumber } from 'ethers';\n\nimport './App.css';\n\n// Refer to the README doc for more information about using API\n// keys in client-side code. You should never do this in production\n// level code.\nconst settings = {\n  apiKey: process.env.REACT_APP_ALCHEMY_API_KEY,\n  network: Network.ETH_MAINNET,\n};\n\n\n// // In this week's lessons we used ethers.js. Here we are using the\n// // Alchemy SDK is an umbrella library with several different packages.\n// //\n// // You can read more about the packages here:\n// //   https://docs.alchemy.com/reference/alchemy-sdk-api-surface-overview#api-surface\nconst alchemy = new Alchemy(settings);\n\nfunction App() {\n  // const [blockNumber, setBlockNumber] = useState();\n  const [address, setAddress] = useState();\n  const [blocksToSearch, setBlocksToSearch] = useState();\n\n  useEffect(() => {\n    // async function getBlockNumber() {\n    //   setBlockNumber(await alchemy.core.getBlockNumber());\n    // }\n    // getBlockNumber();\n    // return <div className=\"App\">Block Number: {blockNumber}</div>;\n\n    async function getTxnHistory() {\n      const txnHistory = [];\n      const blockNumber = await alchemy.core.getBlockNumber();\n      for (let i = blockNumber - blocksToSearch; i <= blockNumber; i++) {\n        console.log(\"block number:\" + i);\n        const block = await alchemy.core.getBlockWithTransactions(i);\n        const blockTransactions = block.transactions;\n        const dateObj = new Date(block.timestamp * 1000);\n        const date = dateObj.toLocaleString();\n        let txnRecord = {};\n        for (let j = 0; j < blockTransactions.length; j++){\n          if (blockTransactions[j].from == address || blockTransactions[j].to == address) {\n              const gasFee = blockTransactions[j].gasPrice * blockTransactions[j].gasLimit;\n              let txnURL = \"https://etherscan.io/tx/\" + blockTransactions[j].hash;\n              txnRecord['Date'] = date;\n              txnRecord['Block Number'] = i.toString();\n              if (blockTransactions[j].from == address) {\n                  txnRecord['Txn Type'] = 'Sent';\n                  txnRecord['Counterparty'] = blockTransactions[j].to;\n              };\n              if (blockTransactions[j].to == address) {\n                  txnRecord['Txn Type'] = 'Received';\n                  txnRecord['Counterparty'] = blockTransactions[j].from;\n              };\n              txnRecord['Amount'] = ethers.utils.formatEther(ethers.BigNumber.from(parseInt(blockTransactions[j].value._hex, 16).toString()));\n              txnRecord['Gas Fee'] = ethers.utils.formatEther(ethers.BigNumber.from(parseInt(gasFee.toString(16))));\n              txnRecord['Etherscan Txn Record'] = txnURL;\n              txnHistory.push(txnRecord);\n              console.log(txnRecord);\n          };\n        };\n      };\n      return txnHistory;\n    };\n\n    // const address = document.getElementById(\"public-address\").value;\n    // const blocksToSearch = document.getElementById(\"blocks-to-search\").value;\n    // const response = await axios.get(`${server}/get-address-txns/${address}/${blocksToSearch}`);\n    const txnHistory = getTxnHistory();\n    let html = \"<table class='table'>\" +\n               \"<tr>\" +\n                \"<th>Date</th>\" +\n                \"<th>Block Number</th>\" +\n                \"<th>Txn Type</th>\" +\n                \"<th>Counterparty</th>\" +\n                \"<th>Amount (ETH)</th>\" +\n                \"<th>Gas Fee (ETH)</th>\" +\n                \"<th>Etherscan Txn Record</th>\" +\n                \"</tr>\";\n    for (let i = 0; i < txnHistory.length; i++) {\n        html += \"<tr>\" + \"<td>\" + txnHistory[i]['Date'] + \"</td>\"\n        + \"<td>\" + txnHistory[i]['Block Number'] + \"</td>\"\n        + \"<td>\" + txnHistory[i]['Txn Type'] + \"</td>\"\n        + \"<td>\" + txnHistory[i]['Counterparty'] + \"</td>\"\n        + \"<td>\" + txnHistory[i]['Amount'] + \"</td>\"\n        + \"<td>\" + txnHistory[i]['Gas Fee'] + \"</td>\"\n        + \"<td>\" + \"<a href='\" + txnHistory[i]['Etherscan Txn Record'] + \"'>\" \n        + txnHistory[i]['Etherscan Txn Record'] + \"</a>\" + \"</td>\" + \"</tr>\";\n    };\n    html += \"</table>\";\n    return html;\n\n  });\n\n  \n\n  \n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}