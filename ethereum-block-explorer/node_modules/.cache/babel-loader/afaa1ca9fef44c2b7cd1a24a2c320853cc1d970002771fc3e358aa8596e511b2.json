{"ast":null,"code":"var _jsxFileName = \"/Users/benjaminshmulevsky/repos/alchemyu/ethereum-block-explorer/src/App.js\",\n  _s = $RefreshSig$();\nimport { Alchemy, Network } from 'alchemy-sdk';\nimport { useEffect, useState } from 'react';\nimport { ethers } from 'ethers';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst settings = {\n  apiKey: process.env.REACT_APP_ALCHEMY_API_KEY,\n  network: Network.ETH_MAINNET\n};\nconst alchemy = new Alchemy(settings);\nfunction App() {\n  _s();\n  const [address, setAddress] = useState('');\n  const [blocksToSearch, setBlocksToSearch] = useState('');\n  const [txnHistory, setTxnHistory] = useState([]);\n  const handleSearch = async () => {\n    const newTxnHistory = [];\n    const blockNumber = await alchemy.core.getBlockNumber();\n    for (let i = blockNumber - parseInt(blocksToSearch); i <= blockNumber; i++) {\n      const block = await alchemy.core.getBlockWithTransactions(i);\n      const blockTransactions = block.transactions;\n      const dateObj = new Date(block.timestamp * 1000);\n      const date = dateObj.toLocaleString();\n      blockTransactions.forEach(tx => {\n        if (tx.from === address || tx.to === address) {\n          const gasFee = tx.gasPrice.mul(tx.gasLimit);\n          const txnRecord = {\n            Date: date,\n            'Block Number': i.toString(),\n            'Txn Type': tx.from === address ? 'Sent' : 'Received',\n            'Counterparty': tx.from === address ? tx.to : tx.from,\n            'Amount': ethers.utils.formatEther(tx.value),\n            'Gas Fee': ethers.utils.formatEther(gasFee),\n            'Etherscan Txn Record': `https://etherscan.io/tx/${tx.hash}`\n          };\n          newTxnHistory.push(txnRecord);\n        }\n      });\n    }\n    setTxnHistory(newTxnHistory);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Address\",\n      value: address,\n      onChange: e => setAddress(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      placeholder: \"Blocks to Search\",\n      value: blocksToSearch,\n      onChange: e => setBlocksToSearch(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSearch,\n      children: \"Search\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), txnHistory.length > 0 && /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"table\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Block Number\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Txn Type\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Counterparty\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Amount (ETH)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Gas Fee (ETH)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Etherscan Txn Record\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: txnHistory.map((txn, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: txn.Date\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: txn['Block Number']\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: txn['Txn Type']\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: txn['Counterparty']\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: txn['Amount']\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: txn['Gas Fee']\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(\"a\", {\n              href: txn['Etherscan Txn Record'],\n              target: \"_blank\",\n              rel: \"noreferrer\",\n              children: txn['Etherscan Txn Record']\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 17\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"lUmFt+DHcDmJeX9Xjk5NhjFdePc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Alchemy","Network","useEffect","useState","ethers","settings","apiKey","process","env","REACT_APP_ALCHEMY_API_KEY","network","ETH_MAINNET","alchemy","App","address","setAddress","blocksToSearch","setBlocksToSearch","txnHistory","setTxnHistory","handleSearch","newTxnHistory","blockNumber","core","getBlockNumber","i","parseInt","block","getBlockWithTransactions","blockTransactions","transactions","dateObj","Date","timestamp","date","toLocaleString","forEach","tx","from","to","gasFee","gasPrice","mul","gasLimit","txnRecord","toString","utils","formatEther","value","hash","push","e","target","length","map","txn","index"],"sources":["/Users/benjaminshmulevsky/repos/alchemyu/ethereum-block-explorer/src/App.js"],"sourcesContent":["import { Alchemy, Network } from 'alchemy-sdk';\nimport { useEffect, useState } from 'react';\nimport { ethers } from 'ethers';\n\nimport './App.css';\n\nconst settings = {\n  apiKey: process.env.REACT_APP_ALCHEMY_API_KEY,\n  network: Network.ETH_MAINNET,\n};\n\nconst alchemy = new Alchemy(settings);\n\nfunction App() {\n  const [address, setAddress] = useState('');\n  const [blocksToSearch, setBlocksToSearch] = useState('');\n  const [txnHistory, setTxnHistory] = useState([]);\n\n  const handleSearch = async () => {\n    const newTxnHistory = [];\n    const blockNumber = await alchemy.core.getBlockNumber();\n    for (let i = blockNumber - parseInt(blocksToSearch); i <= blockNumber; i++) {\n      const block = await alchemy.core.getBlockWithTransactions(i);\n      const blockTransactions = block.transactions;\n      const dateObj = new Date(block.timestamp * 1000);\n      const date = dateObj.toLocaleString();\n\n      blockTransactions.forEach(tx => {\n        if (tx.from === address || tx.to === address) {\n          const gasFee = tx.gasPrice.mul(tx.gasLimit);\n          const txnRecord = {\n            Date: date,\n            'Block Number': i.toString(),\n            'Txn Type': tx.from === address ? 'Sent' : 'Received',\n            'Counterparty': tx.from === address ? tx.to : tx.from,\n            'Amount': ethers.utils.formatEther(tx.value),\n            'Gas Fee': ethers.utils.formatEther(gasFee),\n            'Etherscan Txn Record': `https://etherscan.io/tx/${tx.hash}`\n          };\n          newTxnHistory.push(txnRecord);\n        }\n      });\n    }\n    setTxnHistory(newTxnHistory);\n  };\n\n  return (\n    <div className=\"App\">\n      <input\n        type=\"text\"\n        placeholder=\"Address\"\n        value={address}\n        onChange={e => setAddress(e.target.value)}\n      />\n      <input\n        type=\"number\"\n        placeholder=\"Blocks to Search\"\n        value={blocksToSearch}\n        onChange={e => setBlocksToSearch(e.target.value)}\n      />\n      <button onClick={handleSearch}>Search</button>\n\n      {txnHistory.length > 0 && (\n        <table className='table'>\n          <thead>\n            <tr>\n              <th>Date</th>\n              <th>Block Number</th>\n              <th>Txn Type</th>\n              <th>Counterparty</th>\n              <th>Amount (ETH)</th>\n              <th>Gas Fee (ETH)</th>\n              <th>Etherscan Txn Record</th>\n            </tr>\n          </thead>\n          <tbody>\n            {txnHistory.map((txn, index) => (\n              <tr key={index}>\n                <td>{txn.Date}</td>\n                <td>{txn['Block Number']}</td>\n                <td>{txn['Txn Type']}</td>\n                <td>{txn['Counterparty']}</td>\n                <td>{txn['Amount']}</td>\n                <td>{txn['Gas Fee']}</td>\n                <td><a href={txn['Etherscan Txn Record']} target=\"_blank\" rel=\"noreferrer\">{txn['Etherscan Txn Record']}</a></td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,SAASA,OAAO,EAAEC,OAAO,QAAQ,aAAa;AAC9C,SAASC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,MAAM,QAAQ,QAAQ;AAE/B,OAAO,WAAW;AAAC;AAEnB,MAAMC,QAAQ,GAAG;EACfC,MAAM,EAAEC,OAAO,CAACC,GAAG,CAACC,yBAAyB;EAC7CC,OAAO,EAAET,OAAO,CAACU;AACnB,CAAC;AAED,MAAMC,OAAO,GAAG,IAAIZ,OAAO,CAACK,QAAQ,CAAC;AAErC,SAASQ,GAAG,GAAG;EAAA;EACb,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACa,cAAc,EAAEC,iBAAiB,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAACe,UAAU,EAAEC,aAAa,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EAEhD,MAAMiB,YAAY,GAAG,YAAY;IAC/B,MAAMC,aAAa,GAAG,EAAE;IACxB,MAAMC,WAAW,GAAG,MAAMV,OAAO,CAACW,IAAI,CAACC,cAAc,EAAE;IACvD,KAAK,IAAIC,CAAC,GAAGH,WAAW,GAAGI,QAAQ,CAACV,cAAc,CAAC,EAAES,CAAC,IAAIH,WAAW,EAAEG,CAAC,EAAE,EAAE;MAC1E,MAAME,KAAK,GAAG,MAAMf,OAAO,CAACW,IAAI,CAACK,wBAAwB,CAACH,CAAC,CAAC;MAC5D,MAAMI,iBAAiB,GAAGF,KAAK,CAACG,YAAY;MAC5C,MAAMC,OAAO,GAAG,IAAIC,IAAI,CAACL,KAAK,CAACM,SAAS,GAAG,IAAI,CAAC;MAChD,MAAMC,IAAI,GAAGH,OAAO,CAACI,cAAc,EAAE;MAErCN,iBAAiB,CAACO,OAAO,CAACC,EAAE,IAAI;QAC9B,IAAIA,EAAE,CAACC,IAAI,KAAKxB,OAAO,IAAIuB,EAAE,CAACE,EAAE,KAAKzB,OAAO,EAAE;UAC5C,MAAM0B,MAAM,GAAGH,EAAE,CAACI,QAAQ,CAACC,GAAG,CAACL,EAAE,CAACM,QAAQ,CAAC;UAC3C,MAAMC,SAAS,GAAG;YAChBZ,IAAI,EAAEE,IAAI;YACV,cAAc,EAAET,CAAC,CAACoB,QAAQ,EAAE;YAC5B,UAAU,EAAER,EAAE,CAACC,IAAI,KAAKxB,OAAO,GAAG,MAAM,GAAG,UAAU;YACrD,cAAc,EAAEuB,EAAE,CAACC,IAAI,KAAKxB,OAAO,GAAGuB,EAAE,CAACE,EAAE,GAAGF,EAAE,CAACC,IAAI;YACrD,QAAQ,EAAElC,MAAM,CAAC0C,KAAK,CAACC,WAAW,CAACV,EAAE,CAACW,KAAK,CAAC;YAC5C,SAAS,EAAE5C,MAAM,CAAC0C,KAAK,CAACC,WAAW,CAACP,MAAM,CAAC;YAC3C,sBAAsB,EAAG,2BAA0BH,EAAE,CAACY,IAAK;UAC7D,CAAC;UACD5B,aAAa,CAAC6B,IAAI,CAACN,SAAS,CAAC;QAC/B;MACF,CAAC,CAAC;IACJ;IACAzB,aAAa,CAACE,aAAa,CAAC;EAC9B,CAAC;EAED,oBACE;IAAK,SAAS,EAAC,KAAK;IAAA,wBAClB;MACE,IAAI,EAAC,MAAM;MACX,WAAW,EAAC,SAAS;MACrB,KAAK,EAAEP,OAAQ;MACf,QAAQ,EAAEqC,CAAC,IAAIpC,UAAU,CAACoC,CAAC,CAACC,MAAM,CAACJ,KAAK;IAAE;MAAA;MAAA;MAAA;IAAA,QAC1C,eACF;MACE,IAAI,EAAC,QAAQ;MACb,WAAW,EAAC,kBAAkB;MAC9B,KAAK,EAAEhC,cAAe;MACtB,QAAQ,EAAEmC,CAAC,IAAIlC,iBAAiB,CAACkC,CAAC,CAACC,MAAM,CAACJ,KAAK;IAAE;MAAA;MAAA;MAAA;IAAA,QACjD,eACF;MAAQ,OAAO,EAAE5B,YAAa;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAgB,EAE7CF,UAAU,CAACmC,MAAM,GAAG,CAAC,iBACpB;MAAO,SAAS,EAAC,OAAO;MAAA,wBACtB;QAAA,uBACE;UAAA,wBACE;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA,QAAa,eACb;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA,QAAqB,eACrB;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA,QAAiB,eACjB;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA,QAAqB,eACrB;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA,QAAqB,eACrB;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA,QAAsB,eACtB;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA,QAA6B;QAAA;UAAA;UAAA;UAAA;QAAA;MAC1B;QAAA;QAAA;QAAA;MAAA,QACC,eACR;QAAA,UACGnC,UAAU,CAACoC,GAAG,CAAC,CAACC,GAAG,EAAEC,KAAK,kBACzB;UAAA,wBACE;YAAA,UAAKD,GAAG,CAACvB;UAAI;YAAA;YAAA;YAAA;UAAA,QAAM,eACnB;YAAA,UAAKuB,GAAG,CAAC,cAAc;UAAC;YAAA;YAAA;YAAA;UAAA,QAAM,eAC9B;YAAA,UAAKA,GAAG,CAAC,UAAU;UAAC;YAAA;YAAA;YAAA;UAAA,QAAM,eAC1B;YAAA,UAAKA,GAAG,CAAC,cAAc;UAAC;YAAA;YAAA;YAAA;UAAA,QAAM,eAC9B;YAAA,UAAKA,GAAG,CAAC,QAAQ;UAAC;YAAA;YAAA;YAAA;UAAA,QAAM,eACxB;YAAA,UAAKA,GAAG,CAAC,SAAS;UAAC;YAAA;YAAA;YAAA;UAAA,QAAM,eACzB;YAAA,uBAAI;cAAG,IAAI,EAAEA,GAAG,CAAC,sBAAsB,CAAE;cAAC,MAAM,EAAC,QAAQ;cAAC,GAAG,EAAC,YAAY;cAAA,UAAEA,GAAG,CAAC,sBAAsB;YAAC;cAAA;cAAA;cAAA;YAAA;UAAK;YAAA;YAAA;YAAA;UAAA,QAAK;QAAA,GAP1GC,KAAK;UAAA;UAAA;UAAA;QAAA,QASf;MAAC;QAAA;QAAA;QAAA;MAAA,QACI;IAAA;MAAA;MAAA;MAAA;IAAA,QAEX;EAAA;IAAA;IAAA;IAAA;EAAA,QACG;AAEV;AAAC,GA/EQ3C,GAAG;AAAA,KAAHA,GAAG;AAiFZ,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}